{
  "info": {
    "_postman_id": "9a8b7c6d-1234-4ef0-a1b2-abcdef123456",
    "name": "Cue Wellness - API Collection (JWT coaches)",
    "description": "Updated collection adding Coach auth flows: signup, verify-otp (returns accessToken + sets CoachRefreshToken cookie), login (returns accessToken + sets CoachRefreshToken cookie), refresh-token route, logout, logout-all, plus protected 'me' route and uploads. Based on previous Admin & OTP collection. Source collection referenced in project files. See code changes for cookie name CoachRefreshToken and JWT util. (Includes capture scripts for accessToken + CoachRefreshToken cookie).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Admin",
      "item": [
        {
          "name": "Auth - Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobile\": \"+911234567890\",\n  \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/login",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "login"]
            },
            "description": "Login admin with mobile + password. Response returns `accessToken` and sets `RefreshToken` cookie."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login returns 200', function () { pm.response.to.have.status(200); });",
                  "try {",
                  "  const body = pm.response.json();",
                  "  if (body && body.accessToken) pm.environment.set('accessToken', body.accessToken);",
                  "  // capture refresh token from Set-Cookie header if present",
                  "  var setCookie = pm.response.headers.get('set-cookie') || pm.response.headers.get('Set-Cookie');",
                  "  if (setCookie) {",
                  "    var m = setCookie.match(/RefreshToken=([^;]+);?/);",
                  "    if (m && m[1]) pm.environment.set('refreshToken', m[1]);",
                  "  }",
                  "} catch (e) { console.log('Token capture failed', e); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Auth - Refresh Access Token",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Cookie", "value": "RefreshToken={{refreshToken}}" }
            ],
            "body": { "mode": "raw", "raw": "" },
            "url": {
              "raw": "{{baseUrl}}/admin/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "refresh"]
            },
            "description": "Admin refresh endpoint. Use refresh token cookie or body to rotate and obtain new access token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Refresh returns 200', function () { pm.response.to.have.status(200); });",
                  "try { const body = pm.response.json(); if (body && body.accessToken) pm.environment.set('accessToken', body.accessToken); } catch (e) { }",
                  "var setCookie = pm.response.headers.get('set-cookie') || pm.response.headers.get('Set-Cookie');",
                  "if (setCookie) { var m = setCookie.match(/RefreshToken=([^;]+);?/); if (m && m[1]) pm.environment.set('refreshToken', m[1]); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OTP",
      "item": [
        {
          "name": "OTP - Send OTP",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"+971501234567\",\n  \"userType\": \"coach\",\n  \"operation\": \"login\",\n  \"meta\": { \"ip\": \"{{pm.request.ip}}\" }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/otp/send",
              "host": ["{{baseUrl}}"],
              "path": ["otp", "send"]
            },
            "description": "Send OTP. `operation` indicates the OTP usage (e.g. login, register)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Send OTP returns 201', function () { pm.response.to.have.status(201); });",
                  "try { const body = pm.response.json(); if (body && body.otpId) pm.environment.set('otpId', body.otpId); } catch (e) { }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "OTP - Verify OTP (coach flow)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"otpId\": \"{{otpId}}\",\n  \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/otp/verify",
              "host": ["{{baseUrl}}"],
              "path": ["otp", "verify"]
            },
            "description": "Verify OTP. For coach flow this will be consumed by coachController.verifyOtp and that flow issues tokens."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Verify returns expected codes', function () { pm.expect(pm.response.code).to.be.oneOf([200,401,410,429]); });",
                  "try { const body = pm.response.json(); if (body && body.accessToken) pm.environment.set('accessToken', body.accessToken); } catch(e) {}",
                  "var setCookie = pm.response.headers.get('set-cookie') || pm.response.headers.get('Set-Cookie');",
                  "if (setCookie) { var m = setCookie.match(/CoachRefreshToken=([^;]+);?/); if (m && m[1]) pm.environment.set('coachRefreshToken', m[1]); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Coach",
      "item": [
        {
          "name": "Coach - Signup",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Coach One\",\n  \"mobile\": \"+971501234567\",\n  \"password\": \"Password123\",\n  \"agree_terms_conditions\": true,\n  \"agree_privacy_policy\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/coach/signup",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "signup"]
            },
            "description": "Signup a coach â€” returns legacyToken encrypted for interim flows. Does not auto-login."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Signup returns 201', function () { pm.response.to.have.status(201); });",
                  "try { const body = pm.response.json(); if (body && body.data && body.data.legacyToken) pm.environment.set('coachLegacyToken', body.data.legacyToken); } catch(e) {}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Verify OTP (and login, returns accessToken + sets CoachRefreshToken cookie)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"otpId\": \"{{otpId}}\",\n  \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/coach/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "verify-otp"]
            },
            "description": "Verify OTP for coach. On success, returns `accessToken` (JWT) and sets cookie `CoachRefreshToken`."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Coach verify returns 200', function () { pm.response.to.have.status(200); });",
                  "try { const body = pm.response.json(); if (body && body.accessToken) pm.environment.set('coachAccessToken', body.accessToken); } catch(e) {}",
                  "var setCookie = pm.response.headers.get('set-cookie') || pm.response.headers.get('Set-Cookie');",
                  "if (setCookie) { var m = setCookie.match(/CoachRefreshToken=([^;]+);?/); if (m && m[1]) pm.environment.set('coachRefreshToken', m[1]); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Login (mobile + password) -> returns accessToken + CoachRefreshToken cookie",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobile\": \"+971501234567\",\n  \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/coach/login",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "login"]
            },
            "description": "Login coach with mobile and password. Sets cookie `CoachRefreshToken` and returns `accessToken` in body."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Coach login returns 200', function () { pm.response.to.have.status(200); });",
                  "try { const body = pm.response.json(); if (body && body.accessToken) pm.environment.set('coachAccessToken', body.accessToken); } catch(e) {}",
                  "var setCookie = pm.response.headers.get('set-cookie') || pm.response.headers.get('Set-Cookie');",
                  "if (setCookie) { var m = setCookie.match(/CoachRefreshToken=([^;]+);?/); if (m && m[1]) pm.environment.set('coachRefreshToken', m[1]); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Refresh Access Token (exchange CoachRefreshToken cookie for new accessToken)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              {
                "key": "Cookie",
                "value": "CoachRefreshToken={{coachRefreshToken}}"
              }
            ],
            "body": { "mode": "raw", "raw": "" },
            "url": {
              "raw": "{{baseUrl}}/coach/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "refresh-token"]
            },
            "description": "Use refresh token (cookie or body) to get new access token. If rotation occurs response sets new `CoachRefreshToken` cookie."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Coach refresh returns 200', function () { pm.response.to.have.status(200); });",
                  "try { const body = pm.response.json(); if (body && body.accessToken) pm.environment.set('coachAccessToken', body.accessToken); } catch(e) {}",
                  "var setCookie = pm.response.headers.get('set-cookie') || pm.response.headers.get('Set-Cookie');",
                  "if (setCookie) { var m = setCookie.match(/CoachRefreshToken=([^;]+);?/); if (m && m[1]) pm.environment.set('coachRefreshToken', m[1]); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Logout (revoke current refresh token) - protected",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              {
                "key": "Authorization",
                "value": "Bearer {{coachAccessToken}}"
              },
              {
                "key": "Cookie",
                "value": "CoachRefreshToken={{coachRefreshToken}}"
              }
            ],
            "body": { "mode": "raw", "raw": "" },
            "url": {
              "raw": "{{baseUrl}}/coach/logout",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "logout"]
            },
            "description": "Logout current session (revokes refresh token provided or clears all if `logout-all`)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout returns 200', function () { pm.response.to.have.status(200); });",
                  "pm.environment.unset('coachAccessToken'); pm.environment.unset('coachRefreshToken');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Logout All Devices (protected)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{coachAccessToken}}" }
            ],
            "body": { "mode": "raw", "raw": "" },
            "url": {
              "raw": "{{baseUrl}}/coach/logout-all",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "logout-all"]
            },
            "description": "Clear all refresh tokens for current coach (protected route)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout-all returns 200', function () { pm.response.to.have.status(200); });",
                  "pm.environment.unset('coachAccessToken'); pm.environment.unset('coachRefreshToken');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Me (protected)",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{coachAccessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/coach/me",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "me"]
            },
            "description": "Fetch authenticated coach profile. Requires Authorization header with accessToken."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Me returns 200', function () { pm.response.to.have.status(200); });",
                  "try { const body = pm.response.json(); if (body && body.data && body.data._id) pm.environment.set('coachId', body.data._id); } catch(e) {}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Check Cookie / Token (try Authorization or refresh cookie)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              {
                "key": "Authorization",
                "value": "Bearer {{coachAccessToken}}"
              },
              {
                "key": "Cookie",
                "value": "CoachRefreshToken={{coachRefreshToken}}"
              }
            ],
            "body": { "mode": "raw", "raw": "" },
            "url": {
              "raw": "{{baseUrl}}/coach/check-cookie",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "check-cookie"]
            },
            "description": "Validate access token or exchange refresh cookie for access token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Check cookie returns 200', function () { pm.response.to.have.status(200); });",
                  "try { const body = pm.response.json(); if (body && body.accessToken) pm.environment.set('coachAccessToken', body.accessToken); } catch(e) {}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Coach - Check Mobile Availability",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{ \"mobile\": \"+971501234567\" }"
            },
            "url": {
              "raw": "{{baseUrl}}/coach/check-mobile",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "check-mobile"]
            },
            "description": "Check if mobile is available for registration."
          }
        },
        {
          "name": "Coach - Forget Password",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobile\": \"+971501234567\",\n  \"newPassword\": \"NewPass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/coach/forget-password",
              "host": ["{{baseUrl}}"],
              "path": ["coach", "forget-password"]
            },
            "description": "Reset password for a coach using mobile number + newPassword (careful, route name in controllers is forgetPassword and expects PUT)."
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": ["// global pre-request placeholder"],
        "type": "text/javascript"
      }
    }
  ]
}
