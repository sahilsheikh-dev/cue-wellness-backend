name: Deploy Cue Wellness Backend to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # --- Set Deployment Timestamp ---
      - name: Set Deployment Timestamp
        id: set_time
        run: echo "value=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      # --- Setup SSH key once ---
      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > id_rsa
          chmod 600 id_rsa

      # --- Capture Hostname from Server ---
      - name: Capture Hostname
        id: get_hostname
        run: |
          HOSTNAME=$(ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "hostname")
          echo "value=$HOSTNAME" >> $GITHUB_OUTPUT
          echo "Captured Hostname: $HOSTNAME"

      # --- Capture Host IP (only IPv4) from Server ---
      - name: Capture Host IP
        id: get_hostip
        run: |
          HOSTIP=$(ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "hostname -I | awk '{for(i=1;i<=NF;i++) if (\$i ~ /^[0-9]+\./) {print \$i; exit}}'")
          echo "value=$HOSTIP" >> $GITHUB_OUTPUT
          echo "Captured Host IP: $HOSTIP"

      # --- Set Service Name ---
      - name: Set Service Name
        id: service_name
        run: |
          echo "value=Cue Wellness Backend" >> $GITHUB_OUTPUT

      # --- Deploy ---
      - name: Deploy to Server via SSH
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: ALL
          script: |
            set -e
            mkdir -p ~/apps/cue-wellness-backend
            cd ~/apps/cue-wellness-backend

            echo "📦 Backing up PM2 process list"
            pm2 save
            cp ~/.pm2/dump.pm2 ~/.pm2/dump.pm2.bak || true

            if [ ! -d ".git" ]; then
              echo "🆕 First time setup: cloning repository"
              git clone git@github.com:sahilsheikh-dev/cue-wellness-backend.git .
            else
              echo "⬇️ Pulling latest changes"
              git fetch origin main
              git reset --hard origin/main
            fi

            echo "📦 Installing dependencies"
            npm install --omit=dev

            # --- FORCE PRODUCTION MODE ---
            export NODE_ENV=production

            # --- EXPORT ENV VARIABLES ---
            export CRYPTR_SECRET="${{ secrets.CRYPTR_SECRET }}"
            export EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}"
            export EMAIL_USERNAME="${{ secrets.EMAIL_USERNAME }}"
            export REMOTE_DB_PASS="${{ secrets.REMOTE_DB_PASS }}"
            export REMOTE_DB_USER="${{ secrets.REMOTE_DB_USER }}"
            export SERVER_IP="${{ secrets.SERVER_IP }}"
            export SERVER_SSH_KEY="${{ secrets.SERVER_SSH_KEY }}"
            export SERVER_USER="${{ secrets.SERVER_USER }}"
            export TWILIO_ACCOUNT_SID="${{ secrets.TWILIO_ACCOUNT_SID }}"
            export TWILIO_AUTH_TOKEN="${{ secrets.TWILIO_AUTH_TOKEN }}"
            export TWILIO_PHONE_NUMBER="${{ secrets.TWILIO_PHONE_NUMBER }}"
            export TWILIO_VERIFY_SERVICE_SID="${{ secrets.TWILIO_VERIFY_SERVICE_SID }}"
            export ALLOWED_ORIGINS="${{ vars.ALLOWED_ORIGINS }}"
            export CERTIFICATES_PATH="${{ vars.CERTIFICATES_PATH }}"
            export DB_MODE="${{ vars.DB_MODE }}"
            export MONGO_URI_LOCAL="${{ vars.MONGO_URI_LOCAL }}"
            export NOTIFY_EMAILS_FAILURE="${{ vars.NOTIFY_EMAILS_FAILURE }}"
            export NOTIFY_EMAILS_SUCCESS="${{ vars.NOTIFY_EMAILS_SUCCESS }}"
            export OTP_EXPIRE_MINUTES="${{ vars.OTP_EXPIRE_MINUTES }}"
            export OTP_MAX_ATTEMPTS="${{ vars.OTP_MAX_ATTEMPTS }}"
            export PORT="${{ vars.PORT }}"
            export PROFILE_PIC_PATH="${{ vars.PROFILE_PIC_PATH }}"
            export REMOTE_DB_IP="${{ vars.REMOTE_DB_IP }}"
            export REMOTE_DB_NAME="${{ vars.REMOTE_DB_NAME }}"
            export UPLOADS_BASE_PATH="${{ vars.UPLOADS_BASE_PATH }}"
            export WORK_ASSETS_PATH="${{ vars.WORK_ASSETS_PATH }}"
            export SERVER_BASE_URL="${{ vars.SERVER_BASE_URL }}"
            export DEPLOYMENT_TIMESTAMP="${{ steps.set_time.outputs.value }}"
            export SERVICE_NAME="${{ steps.service_name.outputs.value }}"
            export HOSTNAME="${{ steps.get_hostname.outputs.value }}"
            export HOSTIP="${{ steps.get_hostip.outputs.value }}"
            export GITHUB_SHA="${{ github.sha }}"
            export GITHUB_ACTOR="${{ github.actor }}"
            export GITHUB_REPOSITORY="${{ github.repository }}"
            export GITHUB_SERVER_URL="${{ github.server_url }}"
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export BCRYPT_SALT_ROUNDS="${{ vars.BCRYPT_SALT_ROUNDS }}"
            export ACCESS_TOKEN_EXPIRES_IN="${{ vars.ACCESS_TOKEN_EXPIRES_IN }}"
            export AUTH_RATE_LIMIT="${{ vars.AUTH_RATE_LIMIT }}"
            export LOG_LEVEL="${{ vars.LOG_LEVEL }}"

            if pm2 describe cue-wellness-backend > /dev/null; then
              echo "♻️ Reloading PM2 process"
              pm2 reload cue-wellness-backend --update-env
            else
              echo "🚀 Starting PM2 process"
              pm2 start index.js --name cue-wellness-backend -i max --update-env
            fi

            pm2 save
            pm2 status
            echo "✅ Deployment step completed"

      # --- Health Check ---
      - name: Health Check
        run: |
          echo "⏳ Waiting for backend..."
          for i in {1..10}; do
            if curl -skf https://backend.cuewellness.net/health; then
              echo "✅ Health check passed"
              exit 0
            else
              echo "⚠️ Attempt $i failed"
              sleep 5
            fi
          done
          echo "❌ Health check failed"
          exit 1

      # --- Rollback ---
      - name: Rollback if Health Check Failed
        if: failure() && steps.deploy.outcome == 'success'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "🚨 Health check failed, rolling back..."
            if [ -f ~/.pm2/dump.pm2.bak ]; then
              cp ~/.pm2/dump.pm2.bak ~/.pm2/dump.pm2
              pm2 resurrect
              pm2 save
              echo "✅ Rollback completed"
            else
              echo "⚠️ No backup found!"
              exit 1
            fi

      # --- Fetch logs on failure ---
      - name: Fetch PM2 Logs on Failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "pm2 logs cue-wellness-backend --lines 100 --nostream > ~/pm2_error.log || true"
          scp -o StrictHostKeyChecking=no -i id_rsa \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/pm2_error.log ./pm2_error.log || true

      # --- Fetch PM2 Status snapshot on failure (so OPS gets both error + status) ---
      - name: Fetch PM2 Status Snapshot (Failure)
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "pm2 status > ~/pm2_status.log; pm2 list >> ~/pm2_status.log; pm2 show cue-wellness-backend >> ~/pm2_status.log; node -v >> ~/pm2_status.log; npm -v >> ~/pm2_status.log; pm2 -v >> ~/pm2_status.log" || true
          scp -o StrictHostKeyChecking=no -i id_rsa \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/pm2_status.log ./pm2_status.log || echo "No pm2_status.log to copy"

      - name: Upload Logs Artifact (Failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pm2-error-logs
          path: ./pm2_error.log

      # --- Fetch status on success ---
      - name: Fetch PM2 Status on Success
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "pm2 status > ~/pm2_status.log; pm2 list >> ~/pm2_status.log; pm2 show cue-wellness-backend >> ~/pm2_status.log; node -v >> ~/pm2_status.log; npm -v >> ~/pm2_status.log; pm2 -v >> ~/pm2_status.log"
          scp -o StrictHostKeyChecking=no -i id_rsa \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/pm2_status.log ./pm2_status.log || true

      - name: Upload Status Artifact (Success)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: pm2-status-report
          path: ./pm2_status.log

      # --- Notify success ---
      - name: Notify Success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ Deployment Successful: ${{ steps.service_name.outputs.value }} on ${{ steps.get_hostname.outputs.value }} (${{ steps.get_hostip.outputs.value }}) - ${{ steps.set_time.outputs.value }}"
          html_body: |
            <h2>✅ Deployment Successful</h2>
            <p>The deployment of <b>${{ steps.service_name.outputs.value }}</b> to <b>${{ steps.get_hostname.outputs.value }} (${{ steps.get_hostip.outputs.value }})</b> was successful.</p>
            <p><b>Time:</b> ${{ steps.set_time.outputs.value }}</p>
            <p>
              <b>Commit:</b>
              <a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}" target="_blank" rel="noopener">
                ${{ github.sha }}
              </a><br/>
              <b>Author:</b> ${{ github.actor }}<br/>
              <b>Message:</b> ${{ github.event.head_commit.message }}
            </p>
            <p>
              🌐 Hostname: <b>${{ steps.get_hostname.outputs.value }}</b><br/>
              📡 Host IP: <b><a href="http://${{ steps.get_hostip.outputs.value }}" target="_blank" rel="noopener">${{ steps.get_hostip.outputs.value }}</a></b><br/>
              🛠️ Service Name: <b>${{ steps.service_name.outputs.value }}</b>
            </p>
            <p>
              🔍 <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" target="_blank" rel="noopener">
                View Full GitHub Actions Logs
              </a><br/>
              🌍 Visit Live Backend - <a href="https://backend.cuewellness.net/" target="_blank" rel="noopener">https://backend.cuewellness.net/</a>
            </p>
            <p>📎 PM2 status report is attached.</p>
          to: ${{ vars.NOTIFY_EMAILS_SUCCESS }}
          from: ${{ secrets.EMAIL_USERNAME }}
          secure: true
          attachments: ./pm2_status.log
          cc: ${{ vars.NOTIFY_EMAILS_FAILURE }}

      # --- Notify failure ---
      - name: Notify Failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ Deployment Failed: ${{ steps.service_name.outputs.value }} on ${{ steps.get_hostname.outputs.value }} (${{ steps.get_hostip.outputs.value }}) - ${{ steps.set_time.outputs.value }}"
          html_body: |
            <h2>❌ Deployment Failed</h2>
            <p>The deployment to <b>${{ steps.service_name.outputs.value }}</b> to <b>${{ steps.get_hostname.outputs.value }} (${{ steps.get_hostip.outputs.value }})</b> failed.</p>
            <p><b>Time:</b> ${{ steps.set_time.outputs.value }}</p>
            <p>
              <b>Commit:</b>
              <a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}" target="_blank" rel="noopener">
                ${{ github.sha }}
              </a><br/>
              <b>Author:</b> ${{ github.actor }}<br/>
              <b>Message:</b> ${{ github.event.head_commit.message }}
            </p>
            <p>
              🌐 Hostname: <b>${{ steps.get_hostname.outputs.value }}</b><br/>
              📡 Host IP: <b><a href="http://${{ steps.get_hostip.outputs.value }}" target="_blank" rel="noopener">${{ steps.get_hostip.outputs.value }}</a></b><br/>
              🛠️ Service Name: <b>${{ steps.service_name.outputs.value }}</b>
            </p>
            <p>
              Attached: <b>PM2 error logs</b> and <b>PM2 status snapshot</b> for troubleshooting.
            </p>
            <p>🔍 <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" target="_blank" rel="noopener">View Full GitHub Actions Logs</a></p>
            <h2>Please Investigate immediately.</h2>
          to: ${{ vars.NOTIFY_EMAILS_FAILURE }}
          from: ${{ secrets.EMAIL_USERNAME }}
          secure: true
          attachments: ./pm2_error.log,./pm2_status.log
          cc: ${{ vars.NOTIFY_EMAILS_SUCCESS }}

      # --- Cleanup SSH key ---
      - name: Cleanup SSH key
        if: always()
        run: rm -f id_rsa

      - name: Final Status
        if: always()
        run: |
          echo "Workflow completed with status: ${{ job.status }}"
          echo "Check the logs at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [ "${{ job.status }}" == "failure" ]; then
            exit 1
          fi
          exit 0
